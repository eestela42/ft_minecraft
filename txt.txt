


Nouvelle generation


- Un bon Perlin Noise DONE

-- gen les blocks [vide]

	-hauteur
	-reliefness

-- donners des values aux blocks en fonction du "biom"
	-temperature
	-humidite
	...


Comment avoir de bonnes values ?



------------MATHS A COMPRENDRE :

inverse lerp
filtre passe bas





--croute terreste = idependant de tous les param



Facteurs :

Largeur des reliefs
Hauteur des relief
Frequences des reliefs
Rhougness

Plaine = frequence basse + hauteur basse + largeur haute + Rhougness bas
Desert = frequence moyenne + hauteur moyenne + largeur moyenne + Rhougness tres bas
Montagne = frequence basse + hauteur haute + largeur haute + Rhougness haut






Spline + Octave = suffisant ?


[Systeme continental] -> [systeme regional] -> [syteme local] -> [systeme detail]

Systeme : on a des "bioms" et un merger de bioms

Ex :

Systeme continental :
		Bioms : Ocean - Continent 
				0-0.4   0.42 - 1.0
		evolution : lente
		merger : rapide

Ocean :
		bioms :	Ocean profond - Ocean peu profond
				0-0.6 			0.62-1
		evolution : lente
		merger : rapide 

Contient :
		bioms : Plaine - Montagne
		merger : lent

Ocean profond :
		bioms : EAU - ile volcanique
		merger : rapide

Ocean peu profons : 
		bioms : EAU - archipelles

Plaine :
		bioms : plat - colines

Montagne : 
		bioms : montagne unique - chaine de montagne 


systeme continental = 0.8 = contient (pas la mer)
				continent = 0.4 = Plaine
				plaine = 0.2 = plat


Variable = hauteur du sol

Systemes qui appelle des systemes


Init Systeme Ocean [liste de systeme + les valeurs d'activations + les valeurs de merge]

Ocean(value);



Si on fait "WolrdBase" = SystemeParameters

lsite de param[vec2 Pos, float temperature, humidite..]


1) la hauteur du sol 
[Pos] => quel biom

2) potentiellement creuser dans le sol en surface 
[h du sol + noise2d] => void

3) rajouter des details (type de blocks, arbres, plantes)
[hauteur du sol, temperature, humidite..] => void

4) rajouter des structures (villages..)



chunkgenerator

for (x, y)
	int groundPos = SystemeGen(x, y);
	//Systemegen nous donne + de param ex: Ocean ou Continent

	systemeRemplissage(x,y,gourndPos,temp, humitde...)
	{
		int z = 0;
		while ( z < groundPos)
		{
			if (CHECK DE NOISE3D && noise3d)
				continue ;	
			fill(choseBlock(z, temperature, humite...));
		}
	}











JSON = fichier de config de la gen


Gen 2D
= 1 data par [x,y ] du chunk
	=> hauteur + types de blocks sousterrai + type de blocks surface
ou	=> RLE blocks + humidity + temperature
ou	=> tout les blocks + RLE bioms 



DATA :

ex :	float 	float[3] 	RLE_INT[3]
		FACTOR 	POS 		BLOCKS_COLONE

GENERATION SYSTEMES :

Caller Base : Ocean (slow_merge 0.42) Continet

Caller Ocean : Deep_plus (fast_merge 0.5) Islands


Calculator Deep : 0.33 fast_noise

Caller Deep_plus : fond_marin (0.12) rien



Deep_plus : 
	hieght = noise_2(x,y)
	expo(height) 




JSON => aller chercher dans le fichier .txt
JSON => init du fichier txt
et ensuite tout est la => trvaille pour aller chercher une var = rien


class constructor 
{
}

Calculator(pos)
{
	json("deep", FLOAT)
}


{
  "deep_Var": {
    "var" : [0.13, 2.5, ]
	"function" : ["get_variable", "use_variable", "devient_cool"]
  }
}



Gen : Ocean Continent
	Ocean : Deep Islands
	Continent : Plaine Montagne
	Plaine : [0.25, 0.36]



Deep ; "get_variable"





init generator
parse => architecture des systemes

on cree => (depuis le bas) le graph des syteme




DataHolder
	:
	get("variable")


ASysteme :
	Data ?
	liste_systeme(Data)
	liste_mergers(systeme1, systeme2)



//EXEMPLE FILE

in :
	ivec2 POS

out :
	int ground_height



base :
	OCEAN
	merge(ground_height, 0.74)
	CONTINENT

Ocea :
	DEEP
	merge(ground_height, 0.2) 
	ISLANDS



DEEP :

	var : 
		pos_factor = 0.02876

	logic :
		value = octave_2d(POS * pos_factor, 4, 2, 1.5)
		spline(	{0.0, 	0.3,	0.4,	0.7,	0.75,	1},
							{1,		10,		50,		70,		80,		130})
		
		POS = spline(var)

/****ou alors****/

DEEP :
	var :
		pos_factor = 0.02876

	logic :
		octave_2d_spline(pos_factor, 4, 2, 1.5)


INIT:
Je parse mon fichier
Je cree les systemes depuis le start
Quand j'arrive sur un systeme Calculator/ un merger
Je setup les var, les funcs et le schema



RUNTIME :
Je rentre dans Systemegenerator.start
Je rentre dans des systemes
J'arrive dans un SystemeCalculator
Je call logic.do_stuff
Je suis le schema
{
	je cree un dataHolder pour ma fonctions
	j'appelle ma fonction avec le dataHolder
}
Je return






