#include <classes/World/ChunkDefault.hpp>
#include <classes/Game/Game.hpp>

ChunkDefault::ChunkDefault() : Chunk(0, 0) {}

ChunkDefault::~ChunkDefault()
{}

ChunkDefault::ChunkDefault(u_int x, u_int y) : Chunk(x, y) {}

#define TOP (1 << 0)
#define BOTTOM (1 << 1)
#define FRONT (1 << 2)
#define BACK (1 << 3)
#define LEFT (1 << 4)
#define RIGHT (1 << 5)

void ChunkDefault::CreateCube(u_char faces, int x, int y, int z, int offsetX, int offsetY) {
	int offset = vertexData.size() / 3;
	unsigned int vertexOffset = (0 << 0) + (0 << 4) + (0 << 8) + (0 << 12) + (0 << 16) + (0 << 20) + (0 << 24) + (0 << 28);

	if (faces & (BACK | LEFT | BOTTOM)) { //0 BOTTOM BACK LEFT
		vertexData.push_back(0 + x + offsetX);
		vertexData.push_back(0 + y + offsetY);
		vertexData.push_back(0 + z);
		vertexOffset += (1 << 4) + (1 << 8) + (1 << 12) + (1 << 16) + (1 << 20) + (1 << 24) + (1 << 28);
	}

    if (faces & (BACK | LEFT | TOP)) { //1 TOP BACK LEFT
		vertexData.push_back(0 + x + offsetX);
		vertexData.push_back(0 + y + offsetY);
		vertexData.push_back(1 + z);
		vertexOffset += (1 << 8) + (1 << 12) + (1 << 16) + (1 << 20) + (1 << 24) + (1 << 28);
	}

	if (faces & (BACK | RIGHT | TOP)) { //2 TOP BACK RIGHT
		vertexData.push_back(1 + x + offsetX);
		vertexData.push_back(0 + y + offsetY);
		vertexData.push_back(1 + z);
		vertexOffset += (1 << 12) + (1 << 16) + (1 << 20) + (1 << 24) + (1 << 28);
	}

	if (faces & (BOTTOM | BACK | RIGHT)) { //3 BOTTOM BACK RIGHT
		vertexData.push_back(1 + x + offsetX);
		vertexData.push_back(0 + y + offsetY);
		vertexData.push_back(0 + z);
		vertexOffset += (1 << 16) + (1 << 20) + (1 << 24) + (1 << 28);
	}

	if (faces & (BOTTOM | FRONT | RIGHT)) { //4 BOTTOM FRONT RIGHT
		vertexData.push_back(1 + x + offsetX);
		vertexData.push_back(1 + y + offsetY);
		vertexData.push_back(0 + z);
		vertexOffset += (1 << 20) + (1 << 24) + (1 << 28);
	}

	if (faces & (TOP | FRONT | RIGHT)) { //5 TOP FRONT RIGHT
		vertexData.push_back(1 + x + offsetX);
		vertexData.push_back(1 + y + offsetY);
		vertexData.push_back(1 + z);
		vertexOffset += (1 << 24) + (1 << 28);
	}

	if (faces & (TOP | FRONT | LEFT)) { //6 TOP FRONT LEFT
		vertexData.push_back(0 + x + offsetX);
		vertexData.push_back(1 + y + offsetY);
		vertexData.push_back(1 + z);
		vertexOffset += (1 << 28);
	}

	if (faces & (BOTTOM | FRONT | LEFT)) { //7 BOTTOM FRONT LEFT
		vertexData.push_back(0 + x + offsetX);
		vertexData.push_back(1 + y + offsetY);
		vertexData.push_back(0 + z);
	}

	if (faces & BACK) {
		shapeAssemblyData.push_back((vertexOffset & 0xF) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0) >> 4) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF00) >> 8) + offset);

		shapeAssemblyData.push_back((vertexOffset & 0xF) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF00) >> 8) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF000) >> 12) + offset);
	}

	if (faces & RIGHT) {
		shapeAssemblyData.push_back(((vertexOffset & 0xF00) >> 8) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF000) >> 12) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000) >> 16) + offset);

		shapeAssemblyData.push_back(((vertexOffset & 0xF00) >> 8) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000) >> 16) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF00000) >> 20) + offset);
	}

	if (faces & FRONT) {
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000) >> 16) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF00000) >> 20) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF000000) >> 24) + offset);

		shapeAssemblyData.push_back(((vertexOffset & 0xF0000) >> 16) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF000000) >> 24) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000000) >> 28) + offset);
	}

	if (faces & LEFT) {
		shapeAssemblyData.push_back(((vertexOffset & 0xF000000) >> 24) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000000) >> 28) + offset);
		shapeAssemblyData.push_back((vertexOffset & 0xF) + offset);

		shapeAssemblyData.push_back(((vertexOffset & 0xF000000) >> 24) + offset);
		shapeAssemblyData.push_back((vertexOffset & 0xF) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0) >> 4) + offset);
	}

	if (faces & TOP) {
		shapeAssemblyData.push_back(((vertexOffset & 0xF0) >> 4) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF00) >> 8) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF00000) >> 20) + offset);

		shapeAssemblyData.push_back(((vertexOffset & 0xF0) >> 4) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF00000) >> 20) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF000000) >> 24) + offset);
	}

	if (faces & BOTTOM) {
		shapeAssemblyData.push_back((vertexOffset & 0xF) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF000) >> 12) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000) >> 16) + offset);

		shapeAssemblyData.push_back((vertexOffset & 0xF) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000) >> 16) + offset);
		shapeAssemblyData.push_back(((vertexOffset & 0xF0000000) >> 28) + offset);
	}
}

void ChunkDefault::CompileData() {	
	bool isLeftNeighborFake = (neighborChunks[3]) ? !neighborChunks[3]->IsRealNeighbor(posX, posY) : true;
	bool isRightNeighborFake = (neighborChunks[1]) ? !neighborChunks[1]->IsRealNeighbor(posX, posY) : true;
	bool isBackNeighborFake = (neighborChunks[2]) ? !neighborChunks[2]->IsRealNeighbor(posX, posY) : true;
	bool isFrontNeighborFake = (neighborChunks[0]) ? !neighborChunks[0]->IsRealNeighbor(posX, posY) : true;
	shapeAssemblyData.clear();
	vertexData.clear();
	
	for (int z = 0; z < sizeZ; z++) {
		for (int y = 0; y < sizeY; y++) {
			for (int x = 0; x < sizeX; x++) {
				if (data[z * sizeY * sizeX + y * sizeX + x]) {
					u_char faces = 0;
					if (x != 0) { //left
						if (!isFilled(x - 1, y, z)) {
							faces |= LEFT;
						}
					}
					else if (isLeftNeighborFake || !neighborChunks[3]->isFilled(sizeX - 1, y, z)){
						faces |= LEFT;
					}

					if (x != sizeX - 1) { //right
						if (!isFilled(x + 1, y, z)) {
							faces |= RIGHT;
						}
					}
					else if (isRightNeighborFake || !neighborChunks[1]->isFilled(0, y, z)){
						faces |= RIGHT;
					}

					if (y != 0) { //back
						if (!isFilled(x, y - 1, z)) {
							faces |= BACK;
						}
					}
					else if (isBackNeighborFake || !neighborChunks[2]->isFilled(x, sizeY - 1, z)){
						faces |= BACK;
					}

					if (y != sizeY - 1) { //front
						if (!isFilled(x, y + 1, z)) {
							faces |= FRONT;
						}
					}
					else if (isFrontNeighborFake || !neighborChunks[0]->isFilled(x, 0, z)){
						faces |= FRONT;
					}

					if (z != 0) { //bottom
						if (!isFilled(x, y, z - 1)) {
							faces |= BOTTOM;
						}
					}
					else {
						faces |= BOTTOM;
					}

					if (z != sizeZ - 1) { //top
						if (!isFilled(x, y, z + 1)) {
							faces |= TOP;
						}
					}
					else {
						faces |= TOP;
					}
					if (faces) {
						CreateCube(faces, x, y, z, posX * sizeX, posY * sizeY);
					}
				}
			}
		}
	}
	dataStruct.data = (u_char *)vertexData.data();
	dataStruct.size = vertexData.size() * 4;
}

bool ChunkDefault::isFilled(int x, int y, int z) {
	if (!IsGenerated()) {
		return false;
	}
	return data[z * sizeY * sizeX + y * sizeX + x];
}

void ChunkDefault::Generate() {
	data = (u_char*)calloc(sizeX * sizeY * sizeZ, sizeof(*data));
	for (int z = 0; z < sizeZ; z++) {
		for (int y = 0; y < sizeY; y++) {
			for (int x = 0; x < sizeX; x++) {
				if(z < std::abs(posY) + std::abs(posX) + 1) {
					data[z * sizeY * sizeX + y * sizeX + x] = 1;
				}
			}
		}
	}
}


void ChunkDefault::Generate(u_int seed) {}